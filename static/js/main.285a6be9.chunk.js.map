{"version":3,"sources":["Utility/util.js","Utility/arrayMethods.js","State/actions.js","State/reducers.js","State/store.js","Components/Graph/Graph.js","Components/Slider/Slider.js","Components/SidePanel/SidePanel.js","Components/Menu/Menu.js","Components/Interface.js","State/AppWrapper.js","Tests/reportWebVitals.js","index.js"],"names":["generateArray","min","max","elements","array","i","push","randFromInterval","swapInArray","first","second","temp","swapSortedInArray","start","sorted","length","selectTwo","val","selectSorted","sleep","milliseconds","Promise","resolve","setTimeout","Math","floor","random","getArraySize","store","getState","sorting","arraySize","setArray","newArray","dispatch","updateArray","setSelected","newSelected","updateSelected","initArray","a","resetArray","animTime","updateSize","newSize","bubbleSort","currentArray","currentSelection","interface","selected","j","mergeSortCaller","mergeSort","unsortedArray","middle","left","slice","right","merge","leftIdx","rightIdx","log","concat","SET_COLORS","UPDATE_SELECTED","START_INIT","END_INIT","START_TRANSITION","END_TRANSITION","UPDATE_ARRAY","UPDATE_MAX_SIZE","SORTING_STARTED","SORTING_STOPPED","type","startedSorting","stoppedSorting","thunkActions","init","isSorting","updateMax","newMax","maxSize","defInterfaceState","colors","transition","initialized","defSortingState","minSize","rootReducer","combineReducers","state","action","colorObject","createStore","applyMiddleware","thunk","Graph","props","className","style","backgroundColor","light","map","value","idx","height","accent","SideBar","handleChange","bind","heightRatio","e","this","target","outputPos","opacity","id","onChange","width","query","htmlFor","color","text","bottom","React","Component","SidePanel","Menu","btnCount","buttons","onClick","actions","background","button","borderColor","Interface","updateQuery","setColors","backdrop","window","addEventListener","innerHeight","document","documentElement","clientHeight","body","setProperty","matchMedia","matches","setState","Container","connect","bindActionCreators","AppWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.285a6be9.chunk.js","sourcesContent":["export const generateArray = (min, max, elements) => {\n    const array = [];\n    for (let i = 0; i < elements; i++) {\n        array.push(randFromInterval(min, max));\n    }\n    return array;\n}\n\nexport const swapInArray = (first, second, array) => {\n    let temp = array[first];\n    array[first] = array[second];\n    array[second] = temp;\n    return [...array];\n}\nexport const swapSortedInArray = (start, sorted, array) => {\n    for (let i = 0; i < sorted.length; i++) {\n        array[start + i] = sorted[i];\n    }\n    return [...array];\n}\nexport const selectTwo = (first, second, array, val) => {\n    array[first] = val;\n    array[second] = val;\n    return [...array];\n}\nexport const selectSorted = (start, length, array, val) => {\n    for (let i = 0; i < length; i++) {\n        array[start + i] = val;\n    }\n    return [...array];\n}\n\nexport const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\n\nconst randFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import store from '../State/store';\nimport { updateArray, updateSelected } from '../State/actions';\nimport { generateArray, swapInArray, swapSortedInArray, selectTwo, selectSorted, sleep } from './util';\n\n\nconst DEFAULT_ARRAY_SIZE = 32;\nconst getArraySize = () => {\n    return store.getState().sorting.arraySize || DEFAULT_ARRAY_SIZE;\n}\nconst setArray = (newArray) => store.dispatch(updateArray(newArray, newArray.length));\nconst setSelected = (newSelected) => store.dispatch(updateSelected(newSelected));\n\n\nexport const initArray = async () => {\n    await sleep(2500); /* waiting for title to animate */\n    setArray(generateArray(0, 0, getArraySize()));\n    setSelected(generateArray(0, 0, getArraySize()));\n    await sleep(200);\n}\n\nexport const resetArray = async (animTime) => {\n    setArray(generateArray(0, 875, getArraySize()));\n    await sleep(animTime); /* waiting for animation to finish */\n}\n\nexport const updateSize = (newSize) => {\n    setArray(generateArray(10, 900, newSize));\n    setSelected(generateArray(0, 0, newSize));\n}\n\nexport const sizeTooLarge = () => {\n    return (store.getState().sorting.maxSize < store.getState().sorting.arraySize);\n}\n\nexport const bubbleSort = async () => {\n    let arraySize = getArraySize();\n    let currentArray = [...store.getState().sorting.array]; /* spread operator prevents mutation */\n    let currentSelection = [...store.getState().interface.selected];\n\n    for (let i = 0; i < arraySize - 1; i++) {\n        for (let j = 0; j < arraySize-i-1; j++) {\n            setSelected(selectTwo(j, j + 1, currentSelection, 1));\n            await sleep(10000 / (arraySize*arraySize));\n            if (currentArray[j] > currentArray[j + 1]) {\n                setArray(swapInArray(j, j + 1, currentArray));\n                await sleep(10000 / (arraySize*arraySize));\n            }\n            setSelected(selectTwo(j, j + 1, currentSelection, 0));\n        }\n    }\n}\n\nexport const mergeSortCaller = async () => {\n    let currentArray = [...store.getState().sorting.array]; /* spread operator prevents mutation */\n    let currentSelection = [...store.getState().interface.selected];\n\n    setArray(await mergeSort(currentArray, currentSelection, currentArray, 0));\n}\n\nconst mergeSort = async (unsortedArray, currentSelection, currentArray, start) => {\n    if (unsortedArray.length <= 1) {\n        return unsortedArray;\n    }\n\n    const middle = Math.floor(unsortedArray.length / 2);\n    const left = unsortedArray.slice(0, middle);\n    const right = unsortedArray.slice(middle);\n\n    return await merge( /* extra arguments are used to update state array during sorting */\n        await mergeSort(left, currentSelection, currentArray, start),\n        await mergeSort(right, currentSelection, currentArray, start + middle),\n        start,\n        start + middle,\n        currentSelection,\n        currentArray\n    );\n}\n\nconst merge = async (left, right, start, middle, currentSelection, currentArray) => {\n    let sorted = [];\n    let leftIdx = 0, rightIdx = 0;\n\n    while (leftIdx < left.length && rightIdx < right.length) {\n        setSelected(selectTwo(start + leftIdx, middle + rightIdx, currentSelection, 1));\n        await sleep(10000 / (currentSelection.length * Math.log(currentSelection.length)));\n        setSelected(selectTwo(start + leftIdx, middle + rightIdx, currentSelection, 0));\n\n        if (left[leftIdx] < right[rightIdx]) {\n            sorted.push(left[leftIdx]);\n            leftIdx++;\n        } else {\n            sorted.push(right[rightIdx]);\n            rightIdx++;\n        }\n    }\n    \n    sorted = sorted.concat(left.slice(leftIdx)).concat(right.slice(rightIdx));\n\n    setArray(swapSortedInArray(start, sorted, currentArray));\n    setSelected(selectSorted(start, sorted.length, currentSelection, 1));\n    await sleep(10000 / currentSelection.length);\n    setSelected(selectSorted(start, sorted.length, currentSelection, 0));\n    return sorted;\n  }","import { initArray, resetArray, updateSize, sizeTooLarge, bubbleSort, mergeSortCaller } from '../Utility/arrayMethods';\n\nexport const SET_COLORS = 'SET_COLORS';\nexport const UPDATE_SELECTED = 'UPDATE_SELECTED';\nexport const START_INIT  = 'START_INIT';\nexport const END_INIT  = 'END_INIT';\nexport const START_TRANSITION  = 'START_TRANSITION';\nexport const END_TRANSITION  = 'END_TRANSITION';\nexport const UPDATE_ARRAY = 'UPDATE_ARRAY';\nexport const UPDATE_MAX_SIZE = 'UPDATE_MAX_SIZE';\nexport const SORTING_STARTED = 'SORTING_STARTED';\nexport const SORTING_STOPPED = 'SORTING_STOPPED';\n\n\n//Interface Actions\nexport const setColors = (colorObject) => {\n    return {\n        type: SET_COLORS,\n        colorObject\n    }\n}\nexport const updateSelected = (newSelected) => {\n    return {\n        type: UPDATE_SELECTED,\n        newSelected\n    }\n}\nconst startInit = () => {\n    return {\n        type: START_INIT\n    }\n}\nconst endInit = () => {\n    return {\n        type: END_INIT\n    }\n}\nconst startTransition = () => {\n    return {\n        type: START_TRANSITION\n    }\n}\nconst endTransition = () => {\n    return {\n        type: END_TRANSITION\n    }\n}\n\n//Sorting Actions\nexport const updateArray = (newArray, newSize) => {\n    return {\n        type: UPDATE_ARRAY,\n        newArray,\n        newSize\n    }\n}\nconst updateMax = (newMax) => {\n    return {\n        type: UPDATE_MAX_SIZE,\n        newMax\n    }\n}\nconst startedSorting = () => {\n    return {\n        type: SORTING_STARTED\n    }\n}\nconst stoppedSorting = () => {\n    return {\n        type: SORTING_STOPPED\n    }\n}\n\n//Redux Thunk Actions\nconst initSequence = () => {\n    return async (dispatch) => {\n        await initArray();\n        dispatch(startInit());\n        await resetArray(600);\n        dispatch(endInit());\n    }\n}\nconst callResetArray = () => {\n    return async (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        dispatch(startedSorting());\n        dispatch(startTransition());\n        await resetArray(200);\n        dispatch(stoppedSorting());\n        dispatch(endTransition());\n    }\n}\nconst callUpdateSize = (newSize) => {\n    return (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        updateSize(newSize);\n    }\n}\nconst updateMaxSize = (newMax) => {\n    return (dispatch) => {\n        dispatch(updateMax(newMax));\n        if (sizeTooLarge())\n            updateSize(newMax);\n    }\n}\nconst startBubbleSort = () => {\n    return async (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        dispatch(startedSorting());\n        await bubbleSort();\n        dispatch(stoppedSorting());\n    }\n}\nconst startMergeSort = () => {\n    return async (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        dispatch(startedSorting());\n        await mergeSortCaller();\n        dispatch(stoppedSorting());\n    }\n}\n\nexport const thunkActions = {\n    init: initSequence,\n    resetArray: callResetArray,\n    updateSize: callUpdateSize,\n    updateMax: updateMaxSize,\n    bubbleSort: startBubbleSort,\n    mergeSort: startMergeSort\n}","import { combineReducers } from 'redux';\nimport { SET_COLORS, UPDATE_SELECTED, START_INIT, END_INIT, START_TRANSITION, END_TRANSITION, UPDATE_ARRAY, UPDATE_MAX_SIZE, SORTING_STARTED, SORTING_STOPPED } from './actions';\n\n\n//Interface\nconst defInterfaceState = {\n    colors: {},\n    selected: [],\n    transition: false,\n    initialized: 0\n}\nconst interfaceReducer = (state = defInterfaceState, action) => {\n    switch (action.type) {\n        case SET_COLORS:\n            return {\n                ...state,\n                colors: action.colorObject\n            }\n        case UPDATE_SELECTED:\n            return {\n                ...state,\n                selected: action.newSelected\n            }\n        case START_INIT:\n            return {\n                ...state,\n                initialized: 1\n            }\n        case END_INIT:\n                return {\n                    ...state,\n                    initialized: 2\n                }\n        case START_TRANSITION:\n            return {\n                ...state,\n                transition: true\n            }\n        case END_TRANSITION:\n            return {\n                ...state,\n                transition: 0\n            }\n        default:\n            return state;\n    }\n}\n\n//Sorting\nconst defSortingState = {\n    array: [],\n    arraySize: 0,\n    minSize: 4,\n    maxSize: 48,\n    isSorting: false\n}\nconst sortingReducer = (state = defSortingState, action) => {\n    switch (action.type) {\n        case UPDATE_ARRAY:\n            return {\n                ...state,\n                array: action.newArray,\n                arraySize: action.newSize\n            }\n        case UPDATE_MAX_SIZE:\n            return {\n                ...state,\n                maxSize: action.newMax\n            }\n        case SORTING_STARTED:\n            return {\n                ...state,\n                isSorting: true\n            }\n        case SORTING_STOPPED:\n            return {\n                ...state,\n                isSorting: false\n            }\n        default:\n            return state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    interface: interfaceReducer,\n    sorting: sortingReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\n\nexport default store;","import './Graph.css';\n\nconst Graph = (props) => {\n    return (\n      <div\n        className=\"graph\"\n        style={{\n          backgroundColor: props.colors.light\n        }}\n      >\n        {\n          props.array.map((value, idx) => (\n            <div\n              key={idx}\n              className={props.transition ? \"fast-bar-transition\"\n                          : props.initialized == 2 ? \"array-bar\"\n                          : \"slow-bar-transition\"}\n              style={{\n                height: `${value/10}%`,\n                backgroundColor: props.selected[idx] ? props.colors.selected : props.colors.accent\n              }}\n            />\n          ))\n        }\n      </div>\n    );\n}\n\n\nexport default Graph;","import React from 'react';\nimport './Slider.css';\n\n\nexport default class SideBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      heightRatio: 0.8\n    }\n  }\n\n  handleChange(e) {\n    this.props.updateSize(e.target.value);\n  }\n\n  render() {\n    let outputPos = ((this.props.arraySize - this.props.min) * 100) / (this.props.max - this.props.min);\n    return (\n      <div className=\"slider\" style={{opacity: this.props.initialized ? 1 : 0}}>\n        <input\n          type=\"range\"\n          min={this.props.min} max={this.props.max}\n          value={this.props.arraySize}\n          className=\"range-slider\"\n          id=\"range-slider\"\n          onChange={this.handleChange}\n          style={{\n            width: this.props.query ? this.state.heightRatio*100 + \"vh\" : \"100%\"\n          }}\n        />\n        <output\n          htmlFor=\"range-slider\"\n          className=\"counter\"\n          style={{\n            color: this.props.query ? this.props.colors.text : this.props.colors.light,\n            backgroundColor: this.props.query ? this.props.colors.light : this.props.colors.accent,\n            bottom: this.props.query ?\n              `calc(${outputPos * this.state.heightRatio}vh - ${outputPos}*28px/100)`: 0\n          }}\n        >{this.props.arraySize}</output>\n      </div>\n    );\n  }\n}","import './SidePanel.css'\n\nconst SidePanel = (props) => {\n    return (\n        <div className=\"side-panel\">\n            \n        </div>\n    );\n}\n\n\nexport default SidePanel;","import React from 'react';\nimport './Menu.css';\n\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            btnCount: 3,\n            buttons: [\n                {text: 'New Array', onClick: this.props.actions.resetArray},\n                {text: 'Bubble Sort', onClick: this.props.actions.bubbleSort},\n                {text: 'Merge Sort', onClick: this.props.actions.mergeSort}\n                /*{text: 'Algo 3', onClick: this.props.actions.resetArray},\n                {text: 'Algo 4', onClick: this.props.actions.resetArray} */\n            ]\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className=\"menu-container\"\n                style={{\n                    background: this.props.initialized ? 'rgba(216,221,224, 0.9)' : this.props.colors.light\n                }}\n            >\n                {this.state.buttons.map((button, idx) => (\n                    <button\n                        onClick={button.onClick}\n                        className=\"menu-item\"\n                        key={idx}\n                        style={{\n                            backgroundColor: this.props.colors.accent,\n                            borderColor: this.props.colors.text,\n                            color: this.props.colors.light,\n                            width: 90 / this.state.btnCount + '%',\n                            opacity: this.props.initialized ? 1 : 0\n                        }}\n                    >{button.text}</button>\n                ))}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Interface.css';\nimport Graph from './Graph/Graph';\nimport Slider from './Slider/Slider';\nimport SidePanel from './SidePanel/SidePanel';\nimport Menu from './Menu/Menu';\nimport '../fonts.css';\n\n\nexport default class Interface extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: true\n    }\n    this.updateQuery = this.updateQuery.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.actions.init();\n    this.props.setColors({\n      light:'#F3F7FB',\n      backdrop:'#222225',\n      accent:'#004BA4',\n      selected: '#D65265',\n      text:'#151515'\n    });\n    this.updateQuery();\n    window.addEventListener('resize', () => {\n      this.updateQuery();\n    })\n  }\n\n  componentDidUpdate() {\n    let innerHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    document.documentElement.style.setProperty('--inner-height', `${innerHeight}px`);\n  }\n\n  updateQuery() {\n    let query = window.matchMedia(\"(min-width: 850px)\").matches\n    this.setState({ query });\n    this.props.actions.updateMax(query ? 128 : 48);\n  }\n\n  render() {\n    return (\n      <div className=\"interface\" style={{backgroundColor: this.props.colors.backdrop}}>\n        <div className=\"grid-wrapper\">\n          <header>\n            <h1\n              className=\"title\"\n              style={{\n                color: this.props.colors.accent\n              }}\n            >Visual Sorting App</h1>\n            <h2\n              className=\"sub-title\"\n              style={{\n                color: this.props.colors.accent\n              }}\n            >By Bryn Deering</h2>\n          </header>\n          <Graph\n            array={this.props.array}\n            selected={this.props.selected}\n            colors={this.props.colors}\n            initialized={this.props.initialized}\n            transition={this.props.transition}\n            arraySize={this.props.arraySize}\n          />\n          <Slider\n            updateSize={this.props.actions.updateSize}\n            arraySize={this.props.arraySize}\n            colors={this.props.colors}\n            initialized={this.props.initialized}\n            query={this.state.query}\n            min={this.props.minSize}\n            max={this.props.maxSize}\n          />\n          <SidePanel />\n          <Menu\n          actions={this.props.actions}\n          colors={this.props.colors}\n          initialized={this.props.initialized}\n          />\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Provider, connect } from 'react-redux';\nimport store from './store';\nimport { setColors, thunkActions } from './actions';\nimport Interface from '../Components/Interface';\nimport { bindActionCreators } from 'redux';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        colors: state.interface.colors,\n        selected: state.interface.selected,\n        transition: state.interface.transition,\n        initialized: state.interface.initialized,\n        array: state.sorting.array,\n        arraySize: state.sorting.arraySize,\n        isSorting: state.sorting.isSorting,\n        minSize: state.sorting.minSize,\n        maxSize: state.sorting.maxSize\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setColors: (colorObject) => { dispatch(setColors(colorObject)) },\n        actions: bindActionCreators(thunkActions, dispatch)\n    }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Interface);\n\n\nexport default class AppWrapper extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Container />\n            </Provider>\n        );\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppWrapper from './State/AppWrapper';\nimport reportWebVitals from './Tests/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}