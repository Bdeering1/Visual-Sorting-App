{"version":3,"sources":["Redux/reducer.js","Redux/store.js","Components/Menu/Menu.js","Components/Graph/Graph.js","Utility/util.js","Components/Interface.js","Redux/AppWrapper.js","Tests/reportWebVitals.js","index.js"],"names":["UPDATE_ARRAY","SET_COLORS","SELECT_ITEMS","defInterfaceState","array","colors","defSortingState","rootReducer","combineReducers","interface","state","action","type","newArray","colorArray","selection","store","createStore","applyMiddleware","thunk","Menu","props","buttons","text","onClick","resetArray","className","this","map","button","idx","style","backgroundColor","borderColor","color","React","Component","Graph","value","height","randFromInterval","min","max","Math","floor","random","Interface","bind","setColors","updateArray","elements","i","push","generateArray","Container","connect","dispatch","AppWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e9e0348.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n//Constants\nconst UPDATE_ARRAY = 'UPDATE_ARRAY';\nconst SET_COLORS = 'SET_COLORS';\nconst SELECT_ITEMS = 'SELECT_ITEMS';\n\n\n//Interface\nexport const updateArray = (newArray) => {\n    return {\n        type: UPDATE_ARRAY,\n        newArray\n    }\n}\nexport const setColors = (colorArray) => {\n    return {\n        type: SET_COLORS,\n        colorArray\n    }\n}\nconst defInterfaceState = {\n    array: [],\n    colors: []\n}\nconst interfaceReducer = (state = defInterfaceState, action) => {\n    switch (action.type) {\n        case UPDATE_ARRAY:\n            return {\n                array: action.newArray,\n                colors: state.colors\n            };\n        case SET_COLORS:\n            return {\n                array: state.array,\n                colors: action.colorArray\n            }\n        default:\n            return state;\n    }\n}\n\n//Sorting\nexport const selectItems = (items) => {\n    return {\n        type: SELECT_ITEMS,\n        items\n    }\n}\nconst defSortingState = [];\nconst sortingReducer = (state = defSortingState, action) => {\n    switch (action.type) {\n        case SELECT_ITEMS:\n            return [];\n        default:\n            return state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    interface: interfaceReducer,\n    selection: sortingReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducer';\n\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\n\nexport default store;","import React from 'react';\nimport './Menu.css';\n\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttons: [\n                {text: 'Generate New Array', onClick: () => this.props.resetArray()},\n                {text: 'Algo 1', onClick: () => this.props.resetArray()},\n                {text: 'Algo 2', onClick: () => this.props.resetArray()},\n                {text: 'Algo 3', onClick: () => this.props.resetArray()},\n                {text: 'Algo 4', onClick: () => this.props.resetArray()}\n            ]\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"menu-container\">\n                {this.state.buttons.map((button, idx) => (\n                    <button\n                        onClick={button.onClick}\n                        className=\"menu-item\"\n                        key={idx}\n                        style={{\n                            backgroundColor: this.props.colors[3],\n                            borderColor: this.props.colors[0],\n                            color: this.props.colors[0]\n                        }}\n                    >{button.text}</button>\n                ))}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Graph.css';\n\nexport default class Graph extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n\n      <div\n        className=\"bar-graph\"\n        style={{backgroundColor: this.props.colors[3],borderColor: this.props.colors[0]}}\n      >\n        {\n          this.props.array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{height: `${value/10}%`, backgroundColor: this.props.colors[2]}}\n            />\n          ))\n        }\n      </div>\n    );\n  }\n}","export function generateArray(min, max, elements) {\n    const array = [];\n    for (let i = 0; i < elements; i++) {\n        array.push(randFromInterval(min, max));\n    }\n    return array;\n}\n\nexport function randFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport './Interface.css';\nimport Menu from './Menu/Menu';\nimport Graph from './Graph/Graph';\nimport { generateArray } from '../Utility/util';\n\nexport default class Interface extends React.Component {\n  constructor(props) {\n    super(props);\n    this.resetArray = this.resetArray.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n    this.props.setColors(['#151515', '#222225', '#004BA4', '#E0E0E0']);\n  }\n\n  resetArray() {\n    this.props.updateArray(generateArray(10, 950, 130));\n  }\n\n  render() {\n    return (\n      <div className=\"Interface\" style={{backgroundColor: this.props.colors[1]}}>\n        <div className=\"interface-wrapper\">\n          <Graph array={this.props.array} colors={this.props.colors} />\n          <Menu resetArray={this.resetArray} colors={this.props.colors}/>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Provider, connect } from 'react-redux';\nimport store from './store';\nimport { updateArray, setColors } from './reducer';\nimport Interface from '../Components/Interface';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        array: state.interface.array,\n        colors: state.interface.colors\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateArray: (newArray) => { dispatch(updateArray(newArray)) },\n        setColors: (colorArray) => { dispatch(setColors(colorArray)) }\n    }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Interface);\n\n\nexport default class AppWrapper extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Container />\n            </Provider>\n        );\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppWrapper from './Redux/AppWrapper';\nimport reportWebVitals from './Tests/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}