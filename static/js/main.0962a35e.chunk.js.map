{"version":3,"sources":["Utility/util.js","Utility/arrayMethods.js","State/actions.js","State/reducers.js","State/store.js","Components/Graph/Graph.js","Components/Slider/Slider.js","Components/SidePanel/SidePanel.js","Components/Menu/Menu.js","Components/Interface.js","State/AppWrapper.js","Tests/reportWebVitals.js","index.js"],"names":["generateArray","min","max","elements","array","i","push","randFromInterval","swapInArray","first","second","temp","swapSortedInArray","start","sorted","length","selectTwo","val","selectSorted","sleep","milliseconds","Promise","resolve","setTimeout","Math","floor","random","getArraySize","store","getState","sorting","arraySize","setArray","newArray","dispatch","updateArray","setSelected","newSelected","updateSelected","bubbleSort","a","currentArray","currentSelection","interface","selected","j","mergeSortCaller","mergeSort","unsortedArray","middle","left","slice","right","merge","leftIdx","rightIdx","log","concat","SET_COLORS","UPDATE_ARRAY","UPDATE_SELECTED","SORTING_STARTED","SORTING_STOPPED","type","newSize","startedSorting","stoppedSorting","actions","resetArray","isSorting","updateSize","defInterfaceState","colors","defSortingState","rootReducer","combineReducers","state","action","colorObject","createStore","applyMiddleware","thunk","Graph","props","className","map","value","idx","style","height","backgroundColor","accent","SideBar","handleChange","bind","heightRatio","query","updateSlider","this","window","addEventListener","setState","matchMedia","matches","e","target","outputPos","id","onChange","width","htmlFor","color","text","light","bottom","React","Component","SidePanel","Menu","btnCount","buttons","onClick","button","borderColor","Interface","setColors","dark","Container","connect","bindActionCreators","AppWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0962a35e.chunk.js","sourcesContent":["export const generateArray = (min, max, elements) => {\n    const array = [];\n    for (let i = 0; i < elements; i++) {\n        array.push(randFromInterval(min, max));\n    }\n    return array;\n}\n\nexport const swapInArray = (first, second, array) => {\n    let temp = array[first];\n    array[first] = array[second];\n    array[second] = temp;\n    return [...array];\n}\nexport const swapSortedInArray = (start, sorted, array) => {\n    for (let i = 0; i < sorted.length; i++) {\n        array[start + i] = sorted[i];\n    }\n    return [...array];\n}\nexport const selectTwo = (first, second, array, val) => {\n    array[first] = val;\n    array[second] = val;\n    return [...array];\n}\nexport const selectSorted = (start, length, array, val) => {\n    for (let i = 0; i < length; i++) {\n        array[start + i] = val;\n    }\n    return [...array];\n}\n\nexport const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\n\nconst randFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import store from '../State/store';\nimport { updateArray, updateSelected } from '../State/actions';\nimport { generateArray, swapInArray, swapSortedInArray, selectTwo, selectSorted, sleep } from './util';\n\n\nconst DEFAULT_ARRAY_SIZE = 32;\nconst getArraySize = () => {\n    return store.getState().sorting.arraySize || DEFAULT_ARRAY_SIZE;\n}\nconst setArray = (newArray) => store.dispatch(updateArray(newArray, newArray.length));\nconst setSelected = (newSelected) => store.dispatch(updateSelected(newSelected));\n\n\nexport const resetArray = () => {\n    setArray(generateArray(10, 900, getArraySize()));\n    setSelected(generateArray(0, 0, getArraySize()));\n}\n\nexport const updateSize = (newSize) => {\n    setArray(generateArray(10, 900, newSize));\n    setSelected(generateArray(0, 0, newSize));\n}\n\nexport const bubbleSort = async () => {\n    let arraySize = getArraySize();\n    let currentArray = [...store.getState().sorting.array]; /* spread operator prevents mutation */\n    let currentSelection = [...store.getState().interface.selected];\n\n    for (let i = 0; i < arraySize - 1; i++) {\n        for (let j = 0; j < arraySize-i-1; j++) {\n            setSelected(selectTwo(j, j + 1, currentSelection, 1));\n            await sleep(10000 / (arraySize*arraySize));\n            if (currentArray[j] > currentArray[j + 1]) {\n                setArray(swapInArray(j, j + 1, currentArray));\n                await sleep(10000 / (arraySize*arraySize));\n            }\n            setSelected(selectTwo(j, j + 1, currentSelection, 0));\n        }\n    }\n}\n\nexport const mergeSortCaller = async () => {\n    let currentArray = [...store.getState().sorting.array]; /* spread operator prevents mutation */\n    let currentSelection = [...store.getState().interface.selected];\n\n    setArray(await mergeSort(currentArray, currentSelection, currentArray, 0));\n}\n\nconst mergeSort = async (unsortedArray, currentSelection, currentArray, start) => {\n    if (unsortedArray.length <= 1) {\n        return unsortedArray;\n    }\n\n    const middle = Math.floor(unsortedArray.length / 2);\n    const left = unsortedArray.slice(0, middle);\n    const right = unsortedArray.slice(middle);\n\n    return await merge( /* extra arguments are used to update state array during sorting */\n        await mergeSort(left, currentSelection, currentArray, start),\n        await mergeSort(right, currentSelection, currentArray, start + middle),\n        start,\n        start + middle,\n        currentSelection,\n        currentArray\n    );\n}\n\nconst merge = async (left, right, start, middle, currentSelection, currentArray) => {\n    let sorted = [];\n    let leftIdx = 0, rightIdx = 0;\n\n    while (leftIdx < left.length && rightIdx < right.length) {\n        setSelected(selectTwo(start + leftIdx, middle + rightIdx, currentSelection, 1));\n        await sleep(10000 / (currentSelection.length * Math.log(currentSelection.length)));\n        setSelected(selectTwo(start + leftIdx, middle + rightIdx, currentSelection, 0));\n\n        if (left[leftIdx] < right[rightIdx]) {\n            sorted.push(left[leftIdx]);\n            leftIdx++;\n        } else {\n            sorted.push(right[rightIdx]);\n            rightIdx++;\n        }\n    }\n    \n    sorted = sorted.concat(left.slice(leftIdx)).concat(right.slice(rightIdx));\n\n    setArray(swapSortedInArray(start, sorted, currentArray));\n    setSelected(selectSorted(start, sorted.length, currentSelection, 1));\n    await sleep(10000 / currentSelection.length);\n    setSelected(selectSorted(start, sorted.length, currentSelection, 0));\n    return sorted;\n  }","import { resetArray, updateSize, bubbleSort, mergeSortCaller } from '../Utility/arrayMethods';\n\nexport const SET_COLORS = 'SET_COLORS';\nexport const UPDATE_ARRAY = 'UPDATE_ARRAY';\nexport const UPDATE_SELECTED = 'UPDATE_SELECTED';\nexport const SORTING_STARTED = 'SORTING_STARTED';\nexport const SORTING_STOPPED = 'SORTING_STOPPED';\n\n\n//Interface Actions\nexport const setColors = (colorObject) => {\n    return {\n        type: SET_COLORS,\n        colorObject\n    }\n}\nexport const updateSelected = (newSelected) => {\n    return {\n        type: UPDATE_SELECTED,\n        newSelected\n    }\n}\n\n//Sorting Actions\nexport const updateArray = (newArray, newSize) => {\n    return {\n        type: UPDATE_ARRAY,\n        newArray,\n        newSize\n    }\n}\nconst startedSorting = () => {\n    return {\n        type: SORTING_STARTED\n    }\n}\nconst stoppedSorting = () => {\n    return {\n        type: SORTING_STOPPED\n    }\n}\n\n//Composite Actions\nconst callResetArray = () => {\n    return (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        resetArray();\n    }\n}\nconst callUpdateSize = (newSize) => {\n    return (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        updateSize(newSize);\n    }\n}\n\n//Asynchronous Actions\nconst startBubbleSort = () => {\n    return async (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        dispatch(startedSorting());\n        await bubbleSort();\n        dispatch(stoppedSorting());\n    }\n}\n\nconst startMergeSort = () => {\n    return async (dispatch, getState) => {\n        if (getState().sorting.isSorting) return;\n        dispatch(startedSorting());\n        await mergeSortCaller();\n        dispatch(stoppedSorting());\n    }\n}\n\nexport const actions = {\n    resetArray: callResetArray,\n    updateSize: callUpdateSize,\n    bubbleSort: startBubbleSort,\n    mergeSort: startMergeSort\n}","import { combineReducers } from 'redux';\nimport { SET_COLORS, UPDATE_ARRAY, UPDATE_SELECTED, SORTING_STARTED, SORTING_STOPPED } from './actions';\n\n\n//Interface\nconst defInterfaceState = {\n    colors: {},\n    selected: []\n}\nconst interfaceReducer = (state = defInterfaceState, action) => {\n    switch (action.type) {\n        case SET_COLORS:\n            return {\n                ...state,\n                colors: action.colorObject\n            }\n        case UPDATE_SELECTED:\n            return {\n                ...state,\n                selected: action.newSelected\n            }\n        default:\n            return state;\n    }\n}\n\n//Sorting\nconst defSortingState = {\n    array: [],\n    arraySize: 0,\n    isSorting: false\n}\nconst sortingReducer = (state = defSortingState, action) => {\n    switch (action.type) {\n        case UPDATE_ARRAY:\n            return {\n                ...state,\n                array: action.newArray,\n                arraySize: action.newSize\n            }\n        case SORTING_STARTED:\n            return {\n                ...state,\n                isSorting: true\n            }\n        case SORTING_STOPPED:\n            return {\n                ...state,\n                isSorting: false\n            }\n        default:\n            return state;\n    }\n}\n\n/* a composed reducer isn't required for the complexity of this project, but I wanted to include one to get practice and demonstrate my Redux knowledge */\nconst rootReducer = combineReducers({\n    interface: interfaceReducer,\n    sorting: sortingReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\n\nexport default store;","import './Graph.css';\n\nconst Graph = (props) => {\n    return (\n      <div\n        className=\"graph\"\n      >\n        {\n          props.array.map((value, idx) => (\n            <div\n              key={idx}\n              style={{\n                height: `${value/10}%`,\n                backgroundColor: props.selected[idx] ? props.colors.selected : props.colors.accent\n              }}\n            />\n          ))\n        }\n      </div>\n    );\n}\n\n\nexport default Graph;","import React from 'react';\nimport './Slider.css';\n\n\nexport default class SideBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      min: 4,\n      max: 128,\n      heightRatio: 0.8,\n      query: false\n    }\n    this.updateSlider = this.updateSlider.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateSlider();\n    window.addEventListener('resize', () => {\n      this.updateSlider();\n    })\n  }\n\n  updateSlider() {\n    this.setState({\n      query: window.matchMedia(\"(min-width: 800px)\").matches\n    });\n    this.setState((state) => ({\n      max: state.query ? 128 : 48\n    }))\n  }\n\n  handleChange(e) {\n    this.props.updateSize(e.target.value);\n  }\n\n  render() {\n    let outputPos = ((this.props.arraySize - this.state.min) * 100) / (this.state.max - this.state.min);\n    return (\n      <div className=\"slider\">\n        <input\n          type=\"range\"\n          min={this.state.min} max={this.state.max}\n          value={this.props.arraySize}\n          className=\"range-slider\"\n          id=\"range-slider\"\n          onChange={this.handleChange}\n          style={{\n            width: this.state.query ? this.state.heightRatio*100 + \"vh\" : \"100%\"\n          }}\n        />\n        <output\n          htmlFor=\"range-slider\"\n          className=\"counter\"\n          style={{\n            color: this.state.query ? this.props.colors.text : this.props.colors.light,\n            backgroundColor: this.state.query ? this.props.colors.light : this.props.colors.accent,\n            bottom: this.state.query ?\n              `calc(${outputPos * this.state.heightRatio}vh - ${outputPos}*28px/100)`\n              : 0\n          }}\n        >{this.props.arraySize}</output>\n      </div>\n    );\n  }\n}","import './SidePanel.css'\n\nconst SidePanel = (props) => {\n    return (\n        <div className=\"side-panel\">\n            \n        </div>\n    );\n}\n\n\nexport default SidePanel;","import React from 'react';\nimport './Menu.css';\n\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            btnCount: 3,\n            buttons: [\n                {text: 'New Array', onClick: this.props.actions.resetArray},\n                {text: 'Bubble Sort', onClick: this.props.actions.bubbleSort},\n                {text: 'Merge Sort', onClick: this.props.actions.mergeSort}\n                /*{text: 'Algo 3', onClick: this.props.actions.resetArray},\n                {text: 'Algo 4', onClick: this.props.actions.resetArray} */\n            ]\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"menu-container\">\n                {this.state.buttons.map((button, idx) => (\n                    <button\n                        onClick={button.onClick}\n                        className=\"menu-item\"\n                        key={idx}\n                        style={{\n                            backgroundColor: this.props.colors.accent,\n                            borderColor: this.props.colors.text,\n                            color: this.props.colors.light,\n                            width: 90 / this.state.btnCount + \"%\"\n                        }}\n                    >{button.text}</button>\n                ))}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Interface.css';\nimport Graph from './Graph/Graph';\nimport Slider from './Slider/Slider';\nimport SidePanel from './SidePanel/SidePanel';\nimport Menu from './Menu/Menu';\n\n\nexport default class Interface extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.actions.resetArray();\n    this.props.setColors({\n      light:'#E0E0E0',\n      dark:'#222225',\n      accent:'#004BA4',\n      selected: '#D65265',\n      text:'#151515'\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"interface\" style={{backgroundColor: this.props.colors.dark}}>\n        <div className=\"grid-wrapper\">\n          <Graph array={this.props.array} selected={this.props.selected} colors={this.props.colors} arraySize={this.props.arraySize}/>\n          <Slider updateSize={this.props.actions.updateSize} arraySize={this.props.arraySize} colors={this.props.colors}/>\n          <SidePanel />\n          <Menu actions={this.props.actions} colors={this.props.colors}/>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Provider, connect } from 'react-redux';\nimport store from './store';\nimport { setColors, actions } from './actions';\nimport Interface from '../Components/Interface';\nimport { bindActionCreators } from 'redux';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        colors: state.interface.colors,\n        selected: state.interface.selected,\n        array: state.sorting.array,\n        arraySize: state.sorting.arraySize\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setColors: (colorObject) => { dispatch(setColors(colorObject)) },\n        actions: bindActionCreators(actions, dispatch)\n    }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Interface);\n\n\nexport default class AppWrapper extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Container />\n            </Provider>\n        );\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppWrapper from './State/AppWrapper';\nimport reportWebVitals from './Tests/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}