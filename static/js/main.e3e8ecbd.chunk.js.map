{"version":3,"sources":["Redux/actions.js","Redux/reducers.js","Redux/store.js","Utility/util.js","Utility/sortingMethods.js","Components/Menu/Menu.js","Components/Graph/Graph.js","Components/Interface.js","Redux/AppWrapper.js","Tests/reportWebVitals.js","index.js"],"names":["SET_COLORS","UPDATE_ARRAY","UPDATE_SELECTED","SORTING_STARTED","SORTING_STOPPED","defInterfaceState","colors","defSortingState","array","selected","arraySize","isSorting","rootReducer","combineReducers","interface","state","action","type","colorObject","sorting","newArray","newSize","newSelected","store","createStore","applyMiddleware","thunk","generateArray","min","max","elements","i","push","randFromInterval","sleep","milliseconds","Promise","resolve","setTimeout","Math","floor","random","ARRAY_SIZE","setArray","dispatch","updateArray","setSelected","updateSelected","resetArray","getState","bubbleSort","a","currentArray","currentSelection","j","temp","Menu","props","buttons","text","onClick","className","this","map","button","idx","style","backgroundColor","light","borderColor","color","React","Component","Graph","value","height","accent","Interface","setColors","dark","Container","connect","AppWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3e8ecbd.chunk.js","sourcesContent":["export const SET_COLORS = 'SET_COLORS';\nexport const UPDATE_ARRAY = 'UPDATE_ARRAY';\nexport const UPDATE_SELECTED = 'UPDATE_SELECTED';\nexport const SORTING_STARTED = 'SORTING_STARTED';\nexport const SORTING_STOPPED = 'SORTING_STOPPED';\n\n\nexport const setColors = (colorObject) => {\n    return {\n        type: SET_COLORS,\n        colorObject\n    }\n}\n\nexport const updateArray = (newArray, newSize) => {\n    return {\n        type: UPDATE_ARRAY,\n        newArray,\n        newSize\n    }\n}\nexport const updateSelected = (newSelected) => {\n    return {\n        type: UPDATE_SELECTED,\n        newSelected\n    }\n}\n\nexport const startedSorting = () => {\n    return {\n        type: SORTING_STARTED\n    }\n}\nexport const stoppedSorting = () => {\n    return {\n        type: SORTING_STOPPED\n    }\n}","import { combineReducers } from 'redux';\nimport { SET_COLORS, UPDATE_ARRAY, UPDATE_SELECTED, SORTING_STARTED, SORTING_STOPPED } from './actions';\n\n\n//Interface\nconst defInterfaceState = {\n    colors: {}\n}\nconst interfaceReducer = (state = defInterfaceState, action) => {\n    switch (action.type) {\n        case SET_COLORS:\n            return {\n                colors: action.colorObject\n            }\n        default:\n            return state;\n    }\n}\n\n//Sorting\nconst defSortingState = {\n    array: [],\n    selected: [],\n    arraySize: 0,\n    isSorting: false\n}\nconst sortingReducer = (state = defSortingState, action) => {\n    switch (action.type) {\n        case UPDATE_ARRAY:\n            return {\n                ...state,\n                array: action.newArray,\n                arraySize: action.newSize\n            }\n        case UPDATE_SELECTED:\n            return {\n                ...state,\n                selected: action.newSelected\n            }\n        case SORTING_STARTED:\n            return {\n                ...state,\n                isSorting: true\n            }\n        case SORTING_STOPPED:\n            return {\n                ...state,\n                isSorting: false\n            }\n        default:\n            return state;\n    }\n}\n\n/* a composed reducer isn't required for the complexity of this project, but I wanted to include one to get practice and demonstrate my Redux knowledge */\nconst rootReducer = combineReducers({\n    interface: interfaceReducer,\n    sorting: sortingReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\n\nexport default store;","export const generateArray = (min, max, elements) => {\n    const array = [];\n    for (let i = 0; i < elements; i++) {\n        array.push(randFromInterval(min, max));\n    }\n    return array;\n}\n\nexport const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\n\nconst randFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import store from '../Redux/store';\nimport { updateArray, updateSelected, startedSorting, stoppedSorting } from '../Redux/actions';\nimport { generateArray, sleep } from './util';\n\n\nconst ARRAY_SIZE = 60;\nconst setArray = (newArray) => store.dispatch(updateArray(newArray, ARRAY_SIZE));\nconst setSelected = (newSelected) => store.dispatch(updateSelected(newSelected));\n\n\nexport const resetArray = () => {\n    if (store.getState().sorting.isSorting) return;\n    setArray(generateArray(10, 900, ARRAY_SIZE));\n    setSelected(generateArray(0, 0, ARRAY_SIZE));\n}\n\nexport const bubbleSort = async () => {\n    if (store.getState().sorting.isSorting) return;\n    store.dispatch(startedSorting());\n    let currentArray = [...store.getState().sorting.array];\n    let currentSelection = [...store.getState().sorting.selected];\n    for (let i = 0; i < ARRAY_SIZE - 1; i++) {\n        for (let j = 0; j < ARRAY_SIZE-i-1; j++) {\n            currentSelection[j] = 1;\n            currentSelection[j + 1] = 1;\n            setSelected([...currentSelection]);\n            await sleep(10000 / (ARRAY_SIZE*ARRAY_SIZE));\n            if (currentArray[j] > currentArray[j + 1]) {\n                let temp = currentArray[j];\n                currentArray[j] = currentArray[j + 1];\n                currentArray[j + 1] = temp;\n                setArray([...currentArray]);\n            }\n            await sleep(10000 / (ARRAY_SIZE*ARRAY_SIZE));\n            currentSelection[j] = 0;\n            currentSelection[j + 1] = 0;\n        }\n    }\n    setSelected([...currentSelection]);\n    store.dispatch(stoppedSorting());\n}","import React from 'react';\nimport './Menu.css';\nimport { resetArray, bubbleSort } from '../../Utility/sortingMethods';\n\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttons: [\n                {text: 'Generate New Array', onClick: resetArray},\n                {text: 'Bubble Sort', onClick: bubbleSort},\n                {text: 'Algo 2', onClick: resetArray},\n                {text: 'Algo 3', onClick: resetArray},\n                {text: 'Algo 4', onClick: resetArray}\n            ]\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"menu-container\">\n                {this.state.buttons.map((button, idx) => (\n                    <button\n                        onClick={button.onClick}\n                        className=\"menu-item\"\n                        key={idx}\n                        style={{\n                            backgroundColor: this.props.colors.light,\n                            borderColor: this.props.colors.text,\n                            color: this.props.colors.text\n                        }}\n                    >{button.text}</button>\n                ))}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Graph.css';\n\nexport default class Graph extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n\n      <div\n        className=\"graph\"\n        style={{backgroundColor: this.props.colors.light,borderColor: this.props.colors.text}}\n      >\n        {\n          this.props.array.map((value, idx) => (\n            <div\n              key={idx}\n              style={{\n                height: `${value/10}%`,\n                backgroundColor: this.props.selected[idx] ? this.props.colors.selected : this.props.colors.accent\n              }}\n            />\n          ))\n        }\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './Interface.css';\nimport Menu from './Menu/Menu';\nimport Graph from './Graph/Graph';\nimport { resetArray } from '../Utility/sortingMethods';\n\n\nexport default class Interface extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    resetArray();\n    this.props.setColors({\n      light:'#E0E0E0',\n      dark:'#222225',\n      accent:'#004BA4',\n      selected: 'orange',\n      text:'#151515'\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"interface\" style={{backgroundColor: this.props.colors.dark}}>\n        <div className=\"interface-wrapper\">\n          <Graph array={this.props.array} selected={this.props.selected} colors={this.props.colors} />\n          <Menu colors={this.props.colors}/>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Provider, connect } from 'react-redux';\nimport store from './store';\nimport { setColors, updateArray, updateSelected } from './actions';\nimport Interface from '../Components/Interface';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        colors: state.interface.colors,\n        array: state.sorting.array,\n        selected: state.sorting.selected\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setColors: (colorObject) => { dispatch(setColors(colorObject)) }\n    }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Interface);\n\n\nexport default class AppWrapper extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Container />\n            </Provider>\n        );\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppWrapper from './Redux/AppWrapper';\nimport reportWebVitals from './Tests/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}